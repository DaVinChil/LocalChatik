package org.example;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.Socket;public class ServerClient extends Thread {    private Socket clientSocket;    private BufferedReader clientReader;    private OutputStream clientWriter;    private String userName;    public String getUserName() {        return userName;    }    public ServerClient(Socket client) {        this.clientSocket = client;    }    public void sendMsg(String msg) throws IOException {        try {            if(!clientSocket.isClosed()){                synchronized (clientSocket) {                    if(!clientSocket.isClosed()){                        clientWriter.write((msg + "\n").getBytes());                        clientWriter.flush();                    }                }            }        } catch (IOException e) {            throw new IOException("Failed send message");        }    }    @Override    public void run() {        try {            setInputOutput();            doRegistration();        } catch (IOException e) {            System.out.println(e.getMessage());            return;        }        enterChat();        receiveMessages();    }    public void setInputOutput() throws IOException {        clientReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));        clientWriter = clientSocket.getOutputStream();    }    public void enterChat() {        ChatServer.addToChat(this);    }    public void doRegistration() throws IOException {        sendMsg("Enter user name: ");        try {            userName = clientReader.readLine();        } catch (IOException e) {            throw new IOException("Failed read input");        }    }    public void receiveMessages() {        try {            String respond;            while ((respond = clientReader.readLine()) != null && !respond.equals("/exit")) {                ChatServer.sendInChat(respond, this);            }            leaveChat();        } catch (IOException e) {            new RuntimeException("Failed read client input");        }    }    public void leaveChat() throws IOException {        ChatServer.removeFromChat(this);        synchronized (clientSocket) {            clientSocket.close();            clientWriter.close();            clientReader.close();        }    }}