package org.example;import java.io.File;import java.io.IOException;import java.net.ServerSocket;import java.net.Socket;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.ArrayList;public class ChatServer {    private static int PORT;    private static ServerSocket serverSocket;    private static ArrayList<ServerClient> clients = new ArrayList<>();    private static DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");    private static FileLogger logger;    public static void main(String[] args) {        try {            setLogger();            setPort();            setServer();            acceptClients();        } catch (IOException e) {            throw new RuntimeException(e);        }    }    private static void setPort(){        PORT = ServerSettings.getPort();    }    public static int getPort(){        return PORT;    }    private static void setLogger(){        logger = FileLogger.getInstance();    }    private static void setServer() throws IOException {        serverSocket = new ServerSocket(PORT);    }    private ChatServer() {}    public static void removeFromChat(ServerClient client) {        clients.remove(client);//        notifyEveryOne(":( :( :( :( :( " + client.getUserName() + " leaved chat" + " ): ): ): ): ):");    }    public static void sendInChat(String msg, ServerClient sender) {        String messageLine = "[" + dtf.format(LocalDateTime.now()) + "]  " + sender.getUserName() + ": " + msg;        logger.log(messageLine);        sendEveryoneExcept(messageLine, sender);    }    private static void sendEveryoneExcept(String msg, ServerClient exclude) {        new Thread(() -> {            for (ServerClient client : clients) {                if (client.equals(exclude)) continue;                try {                    client.sendMsg(msg);                } catch (IOException ignored) {                }            }        }).start();    }    public static void addToChat(ServerClient client) {        clients.add(client);    }    private static void acceptClients() {        while (true) {            try {                Socket client = serverSocket.accept();                new ServerClient(client).start();            } catch (IOException e) {                logger.log(e.getMessage());            }        }    }}